Task 1: Structs

/*
Struct (Structure):
	- A struct is used to create a collection of members of different data types, into a single variable.
	- While arrays are used to store multiple values of the same data type into a single variable, structs are used to store multiple values of different data types into a single variable.
*/

/*
Syntax:
	type struct_name struct {
	member1 datatype;
	member2 datatype;
	member3 datatype;
	...
	}
*/

/*
Example of using syntax:
	type Person struct {
	name string
	age int
	job string
	salary int
	}
*/

package main
import ("fmt")

type Person struct {
  name string
  age int
  job string
  salary int
}

func main() {
  var pers1 Person
  var pers2 Person

  // Pers1 specification
  pers1.name = "Hege"
  pers1.age = 45
  pers1.job = "Teacher"
  pers1.salary = 6000

  // Pers2 specification
  pers2.name = "Cecilie"
  pers2.age = 24
  pers2.job = "Marketing"
  pers2.salary = 4500

  // Access and print Pers1 info
  fmt.Println("Name: ", pers1.name)
  fmt.Println("Age: ", pers1.age)
  fmt.Println("Job: ", pers1.job)
  fmt.Println("Salary: ", pers1.salary)

  // Access and print Pers2 info
  fmt.Println("Name: ", pers2.name)
  fmt.Println("Age: ", pers2.age)
  fmt.Println("Job: ", pers2.job)
  fmt.Println("Salary: ", pers2.salary)
}

/*
Output:
Name: Hege
Age: 45
Job: Teacher
Salary: 6000
Name: Cecilie
Age: 24
Job: Marketing
Salary: 4500
*/

/*
Passing a Struct as Function Arguments:
*/

package main

import "fmt"

type BasketballPlayer struct {
	name      string
	age       int
	team      string
	pointsPerGame float64
}

func main() {
	var player1 BasketballPlayer
	var player2 BasketballPlayer

	// Player1 specification
	player1.name = "LeBron James"
	player1.age = 39
	player1.team = "Los Angeles Lakers"
	player1.pointsPerGame = 27.2

	// Player2 specification
	player2.name = "Stephen Curry"
	player2.age = 35
	player2.team = "Golden State Warriors"
	player2.pointsPerGame = 24.6

	// Print player info by calling a function
	printPlayer(player1)
	printPlayer(player2)
}

func printPlayer(player BasketballPlayer) {
	fmt.Println("Name: ", player.name)
	fmt.Println("Age: ", player.age)
	fmt.Println("Team: ", player.team)
	fmt.Println("Points Per Game: ", player.pointsPerGame)
	fmt.Println()
}

/*
Name:  LeBron James
Age:  39
Team:  Los Angeles Lakers
Points Per Game:  27.2

Name:  Stephen Curry
Age:  35
Team:  Golden State Warriors
Points Per Game:  24.6

*/

Task 2: Maps

/*
Maps:
	- Maps are used to store data values in key:value pairs.
	- Each element in a map is a key:value pair
	- A map is an unordered and changeable collection that does not allow duplicates.
	- The length of a map is the number of its elements. You can find it using the len() function.
	- The default value of a map is nil.
	- Maps hold references to an underlying hash table.

Syntax:
	var a = map[KeyType]ValueType{key1:value1, key2:value2,...}
	b := map[KeyType]ValueType{key1:value1, key2:value2,...}
*/

package main
import ("fmt")

func main() {
	// Initializes the map and declares it 
	// Ex. KeyType = Brand, ValueType = Ford
  var a = map[string]string{"brand": "Ford", "model": "Mustang", "year": "1964"}
  b := map[string]int{"Oslo": 1, "Bergen": 2, "Trondheim": 3, "Stavanger": 4}

  fmt.Printf("a\t%v\n", a)
  fmt.Printf("b\t%v\n", b)
}

/*
	Output: 
	a   map[brand:Ford model:Mustang year:1964]
	b   map[Bergen:2 Oslo:1 Stavanger:4 Trondheim:3]
*/

/*
Maps Using make() function:
	- creates a empty map 
	- you can change it from there
*/

/*
Syntax:
	var a = make(map[KeyType]ValueType)
				or
	b := make(map[KeyType]ValueType)
*/

/*
Create an Empty Map:
	var a map[KeyType]ValueType

	Example:
		package main
		import ("fmt")

		func main() {
		var a = make(map[string]string)
		var b map[string]string

		fmt.Println(a == nil)
		fmt.Println(b == nil)
		} // Output: false true
*/

// Example
	package main
	import ("fmt")

	func main() {
	var a = make(map[string]string) // The map is empty now
	a["brand"] = "Nike"
	a["model"] = "Paul George 6"
	a["year"] = "2021"
									// a is no longer empty
	b := make(map[string]int)
	b["Stephon Castle"] = 1
	b["Wemby"] = 2
	b["Paolo"] = 3
	b["Lamelo"] = 4

	fmt.Printf("a\t%v\n", a)
	fmt.Printf("b\t%v\n", b)
	}

/*
Output:
	a       map[brand:Nike model:Paul George 6 year:2021]
	b       map[Lamelo:4 Paolo:3 Stephon Castle:1 Wemby:2]
*/

/*
Allowed Key Types:
	- Booleans
	- Numbers
	- Strings
	- Arrays
	- Pointers
	- Structs
	- Interfaces (as long as the dynamic type supports equality)
	(The map key can be of any data type for which the equality operator (==) is defined all above)


	Invalid Key Types:
	- Slices
	- Maps
	- Functions
	(These types are invalid because the equality operator (==) is not defined for them.)
*/

/*
Allowed Value Types:
	- The map values can be any type
*/

package main
import ("fmt")

func main(){
	// Let_me_in()
	// UpDating()
	// get_deleted()
	// I_Want_That_One()
	// refer()
	// interate()
	// specific_order()
}

/*
Accessing Map Elements:

		Syntax:
			value = map_name[key]
	*/
		func Let_me_in(){
			var a = make(map[string]string)
			a["college"] = "Wooster"
			a["major"] = "Chem & CS"
			a["year"] = "2027"
		
			// Accessing a element
			fmt.Printf(a["college"])
		} // Output: Wooster



/*

Updating and Adding Map Elements:

		Syntax:
			map_name[key] = value
	*/
		//Example
		func UpDating(){
			var b = make(map[string]string)
			b["Company"] = "Apple"
			b["Position"] = "Software Engineer"
			b["Level"] = "I"
		  
			fmt.Println("Before Update:", b)
		  
			b["Level"] = "II" // Updating an element
			b["Name"] = "Ray" // Adding an element
		  
			fmt.Println("After Updating and Adding:", b)
		}
		/*
		Output:
			Before Update: map[Company:Apple Level:I Position:Software Engineer]
			After Updating and Adding: map[Company:Apple Level:II Name:Ray Position:Software Engineer]

		*/
/*

Removing Elements from Map
		- Removing elements is done using the delete() function.

	Syntax: 
		delete(map_name, key)
	*/
			func get_deleted(){
				var c = make(map[string]string)
				c["Company"] = "Dell"
				c["Position"] = "Data Engineer"
				c["Level"] = "IV"
				c["Name"] = "Mike"

				fmt.Println("Call,", c , " into my office.")

				delete(c,"Level")

				fmt.Println("Now that levels are gone, ", c , " leave my office.")


			}
				/*
				Output:
							Call, map[Company:Dell Level:IV Name:Mike Position:Data Engineer]  into my office.
							Now that levels are gone,  map[Company:Dell Name:Mike Position:Data Engineer]  leave my office.
				*/
/*

Checking for Specific Elements in a Map: 
	- You can check if a certain key exists in a map using:

	Syntax:
			val, ok :=map_name[key]
			(If you only want to check the existence of a certain key, you can use the blank identifier (_) in place of val.)
	*/
	// Example:
			func I_Want_That_One(){
				var a = map[string]string{"brand": "Ford", "model": "Mustang", "year": "1964", "day":""}

				val1, ok1 := a["brand"] // Checking for existing key and its value
				val2, ok2 := a["color"] // Checking for non-existing key and its value
				val3, ok3 := a["day"]   // Checking for existing key and its value
				_, ok4 := a["model"]    // Only checking for existing key and not its value
			  
				fmt.Println(val1, ok1)
				fmt.Println(val2, ok2)
				fmt.Println(val3, ok3)
				fmt.Println(ok4)
			}

			/*
			Output: 
				Ford true
				false
				true
				true
			*/


			



/*

Maps Are References:
	- Maps are references to hash tables.
	- If two map variables refer to the same hash table, changing the content of one variable affect the content of the other.
	*/
	// Example:
			func refer(){
				var e = map[string]string{"genre":"comedy", "movie":"50 First Dates", "year":"2005"}

				f := e

				// Exactly the same because it is the same map
				fmt.Println(e)
				fmt.Println(f)

				// Even through I make a change to f since it is referring it will change e
				f["year"] = "2004"
				fmt.Println("After change to f: ")

				fmt.Println(e)
				fmt.Println(f)

				/*
				Output:
				map[genre:comedy movie:50 First Dates year:2005]
				map[genre:comedy movie:50 First Dates year:2005]
				After change to f: 
				map[genre:comedy movie:50 First Dates year:2004]
				map[genre:comedy movie:50 First Dates year:2004]
				*/

			}


/*

Iterating Over Maps
	- You can use range to iterate over maps.
	*/
	// Example:
			func iterate(){
				p := map[string]int{"one": 1, "two": 2, "three": 3, "four": 4}

				for k, v := range p {
					fmt.Printf("%v : %v, ", k, v)
				}
			}
			/*
			Output:
				one : 1, two : 2, three : 3, four : 4,
			*/

/*

Iterating over Maps in a Specific Order:
	- Maps are unordered data structures
	- If you need to iterate over a map in a specific order, you must have a separate data structure that specifies that order.
	*/
	// Example
			func specific_order(){
				a := map[string]int{"one": 1, "two": 2, "three": 3, "four": 4}

				var b []string             // defining the order
				b = append(b, "one", "two", "three", "four")

				for k, v := range a {        // loop with no order
					fmt.Printf("%v : %v, ", k, v)
				}

				fmt.Println()

				for _, element := range b {  // loop with the defined order
					fmt.Printf("%v : %v, ", element, a[element])
  				}
				}
				/*
				Output:
				two : 2, three : 3, four : 4, one : 1, 
				one : 1, two : 2, three : 3, four : 4,
				*/