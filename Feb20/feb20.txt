// Task 1: Operators

/*
Operators are used to perform operations on variables and values.

- The + operator adds together two values it can also be used to add together 
a variable and a value, or a variable and another variable

*/



package main
import ("fmt")

func main() {
  var a = 15 + 25
  fmt.Println(a) // Output: 40

 var(
	sum1 = 100 + 50 // 150 (100 + 50)
    sum2 = sum1 + 250 // 400 (150 + 250)
    sum3 = sum2 + sum2 // 800 (400 + 400)
 )
 fmt.Println(sum2)
 fmt.Println(sum3)
 
}

/*
Arithmetic Operators
(Arithmetic operators are used to perform common mathematical operations):

Operator	Name			Description								Example
+			Addition		Adds together two values				x + y	
-			Subtraction		Subtracts one value from another		x - y	
*			Multiplication	Multiplies two values					x * y	
/			Division		Divides one value by another			x / y	
%			Modulus			Returns the division remainder			x % y	
++			Increment		Increases the value of a variable by 1	x++	
--			Decrement		Decreases the value of a variable by 1	x--

*/

package main   
import ("fmt") 

func main() {

	//Addition 
	fmt.Print(10 + 5) // 15
	// Subtraction
	fmt.Print(10 - 5) // 5
	// Multiplication
	fmt.Print(10 * 5) // 50
	// Division
	fmt.Print(10 / 5) // 2
}

/*
Assignment Operators
- Assignment operators are used to assign values to variables.
*/

package main
import ("fmt")

func main() {

// The assignment operator (=) to assign a value

  var x = 10
  fmt.Println(x)

  var y = 15
  y +=5
  fmt.Println(y)

}

/* 

A list of all assignment operators:

Operator		Example		Same As		
=				x = 5		x = 5	
+=				x += 3		x = x + 3	
-=				x -= 3		x = x - 3	
*=				x *= 3		x = x * 3	
/=				x /= 3		x = x / 3	
%=				x %= 3		x = x % 3	
&=				x &= 3		x = x & 3	
|=				x |= 3		x = x | 3	
^=				x ^= 3		x = x ^ 3	
>>=				x >>= 3		x = x >> 3	
<<=				x <<= 3		x = x << 3

*/

/*
Comparison Operators:
- Comparison operators are used to compare two values.
- The return value of a comparison is either true (1) or false (0).
*/

package main
import ("fmt")

func main() {

// Greater than operator (>)
  var x = 5
  var y = 3
  fmt.Println(x>y) // returns 1 (true) because 5 is greater than 3
  fmt.Println(x==y)// false (0)
  fmt.Println(x!=y) // true (1)
  fmt.Println(x<y) // false (0)
  fmt.Println(x>=y) // true (1)
  fmt.Println(x<=y) // false (0)
}

/*
A list of all comparison operators:

Operator			Name						Example	
	==				Equal to					x == y	
	!=				Not equal					x != y	
	>				Greater than				x > y	
	<				Less than					x < y	
	>=				Greater than or equal to	x >= y	
	<=				Less than or equal to		x <= y

*/

/*
Logical Operators
- Logical operators are used to determine the logic between variables or values

	Operator		Name								Description								Example	
	&& 				Logical and		Returns true if both statements are true					x < 5 &&  x < 10	
	|| 				Logical or		Returns true if one of the statements is true				x < 5 || x < 4	
	!				Logical not		Reverse the result, returns false if the result is true		!(x < 5 && x < 10)
*/

package main
import ("fmt")
func main() {

  var x = 5

  fmt.Println(x < 5 &&  x < 10) // false

  fmt.Println(x < 5 || x < 4) // false

  fmt.Println(!(x < 5 && x < 10)) // true

}

/*
Bitwise Operators
- Bitwise operators are used on (binary) numbers
*/

package main
import ("fmt")
func main() {

  var x = 9
  var y = 8

  fmt.Printf("x = %b\n",x) // 1001
  fmt.Printf("y = %b\n",y) // 1000
    
  fmt.Printf("x & y is %b\n",x & y)
  fmt.Printf("x | y is %b\n",x | y)
  fmt.Printf("x ^ y is %b\n",x ^ y)
  fmt.Printf("x << 2 is %b\n",x << 2)
  fmt.Printf("x >> 2 is %b\n",x >> 2)

}

/*
Operator		Name						Description																Example
& 				AND							Sets each bit to 1 if both bits are 1									x & y	
|				OR							Sets each bit to 1 if one of two bits is 1								x | y	
 ^				XOR							Sets each bit to 1 if only one of two bits is 1							x ^ b	
<<				Zero fill left shift		Shift left by pushing zeros in from the right							x << 2	
>>				Signed right shift			Shift right by pushing copies of the leftmost bit in from the left, 	x >> 2
											and let the rightmost bits fall off	
*/

Task 2: Conditional statements

/*
Go Conditions:
- A condition can be either true or false.
- Go supports the usual comparison operators from mathematics
- Also supports the usual logical operators
*/


/*
Example:
x > y	
x != y	
(x > y) && (y > z)	
(x == y) || z
*/
package main
import ("fmt")

func main() {
  x := 10
  y := 5
  z := 2

  fmt.Println(x > y)
  fmt.Println(x != y)
  fmt.Println((x > y) && (y > z))
  // fmt.Println((x == y) || z) if z = false
}

/*
Conditional Statements:
- Use if to specify a block of code to be executed, if a specified condition is true
- Use else to specify a block of code to be executed, if the same condition is false
- Use else if to specify a new condition to test, if the first condition is false
- Use switch to specify many alternative blocks of code to be executed
*/

/*
The if Statement:

package main
import ("fmt")

func main() {
  if 20 > 18 {
    fmt.Println("20 is greater than 18")
  }

  x:= 20
  y:= 18
  if x > y {
    fmt.Println("x is greater than y")
  }

}

Output: 20 is greater than 18
Output: x is greater than y
*/

/*
The else Statement:

package main
import ("fmt")

func main() {
  time := 20
  if (time < 18) {
    fmt.Println("Good day.")
  } else {
    fmt.Println("Good evening.")
  }

  temperature := 14
  if (temperature > 15) {
    fmt.Println("It is warm out there")
  } else {
    fmt.Println("It is cold out there")
  }

  // Output: Good evening.
  // Output: It is cold out there
}

*/

/*
The else if Statement:

package main
import ("fmt")

func main() {
  time := 22
  if time < 10 {
    fmt.Println("Good morning.")
  } else if time < 20 {
    fmt.Println("Good day.")
  } else {
    fmt.Println("Good evening.")
  }
}

// Output: Good evening 

*/

/*
The Nested if Statement:

package main
import ("fmt")

func main() {
  num := 20
  if num >= 10 {
    fmt.Println("Num is more than 10.")
    if num > 15 {
      fmt.Println("Num is also more than 15.")
     }
  } else {
    fmt.Println("Num is less than 10.")
  }
}

// Output: 
// Num is more than 10
// Num is also more than 15.

*/

/*
The switch Statement;

package main
import ("fmt")

func main() {
  day := 6

  switch day {
  case 1:
    fmt.Println("Monday")
  case 2:
    fmt.Println("Tuesday")
  case 3:
    fmt.Println("Wednesday")
  case 4:
    fmt.Println("Thursday")
  case 5:
    fmt.Println("Friday")
  case 6:
    fmt.Println("Saturday")
  case 7:
    fmt.Println("Sunday")
  default:
    fmt.Println("Not a weekday")
  }
}

// Output: Saturday

*/


/*
The Multi-case switch Statement:
- It is possible to have multiple values for each case in the switch statement

package main
import ("fmt")

func main() {
   day := 5

   switch day {
   case 1,3,5:
    fmt.Println("Odd weekday")
   case 2,4:
     fmt.Println("Even weekday")
   case 6,7:
    fmt.Println("Weekend")
  default:
    fmt.Println("Invalid day of day number")
  }
}

// Output: Odd weekday

*/

Task 3: Loops & More

/*
For Loops:
- The for loop loops through a block of code a specified number of times.
- The for loop is the only loop available in Go.

Syntax:
for statement1; statement2; statement3 {
   // code to be executed for each iteration
}

1. statement1 Initializes the loop counter value.
2. statement2 Evaluated for each loop iteration. If it evaluates to TRUE, the loop continues. If it evaluates to FALSE, the loop ends.
3. statement3 Increases the loop counter value.

*/

package main
import ("fmt")

func main() {
  for i:=0; i < 5; i++ {
    fmt.Println(i)
  }

  for i:=0; i <= 100; i+=10 {
    fmt.Println(i)
  }
}

/*
For 1st
Output:
0
1
2
3
4

For 2nd
Output:
0
10
20
30
40
50
60
70
80
90
100
*/

/*
The continue Statement:
- The continue statement is used to skip one or more iterations in the loop. It then continues with the next iteration in the loop.
The break Statement:
- The break statement is used to break/terminate the loop execution.
*/

package main

import "fmt"

func main() {
	cont()
	bre()
}

func cont() {
	for i := 0; i < 5; i++ {
		if i == 3 {
			continue
		}
		fmt.Println(i)
	}
}

func bre() {
	for i := 0; i < 5; i++ {
		if i == 3 {
			break
		}
		fmt.Println(i)
	}
}

/*
Cont
Output:
0
1
2
4

Bre
Output:
0
1
2
*/

/*
Nested Loops:
- It is possible to place a loop inside another loop.
- Here, the "inner loop" will be executed one time for each iteration of the "outer loop"
*/

package main
import ("fmt")

func main() {
  adj := [2]string{"big", "tasty"}
  fruits := [3]string{"apple", "orange", "banana"}
  for i:=0; i < len(adj); i++ {
    for j:=0; j < len(fruits); j++ {
      fmt.Println(adj[i],fruits[j])
    }
  }
}

/*
Output:
big apple
big orange
big banana
tasty apple
tasty orange
tasty banana
*/

/*
The Range Keyword: 
- The range keyword is used to more easily iterate through the elements of an array, slice or map. 
It returns both the index and the value.

Syntax:

for index, value := range array|slice|map {
   // code to be executed for each iteration
}

*/

package main
import ("fmt")

func main() {
  fruits := [3]string{"apple", "orange", "banana"}
  for idx, val := range fruits {
     fmt.Printf("%v\t%v\n", idx, val)
  }

  for _, val := range fruits {
	fmt.Printf("%v\n", val)
 }

 for idx, _ := range fruits {
	fmt.Printf("%v\n", idx)
 }

}

/*
Both Values and Index
Output:
0      apple
1      orange
2      banana

Values
Output:
apple
orange
banana

Index
Output:
0
1
2
*/
