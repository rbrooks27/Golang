Task 1: Statements continued

/*
Nested Loops:
- It is possible to place a loop inside another loop.
- Here, the "inner loop" will be executed one time for each iteration of the "outer loop"
*/

package main
import ("fmt")

func main() {
  adj := [2]string{"big", "tasty"}
  fruits := [3]string{"apple", "orange", "banana"}
  for i:=0; i < len(adj); i++ {
    for j:=0; j < len(fruits); j++ {
      fmt.Println(adj[i],fruits[j])
    }
  }
}

/*
Output:
big apple
big orange
big banana
tasty apple
tasty orange
tasty banana
*/

/*
The Switch Statement:
	- Use the switch statement to select one of many code blocks to be executed.
	- The switch statement in Go is similar to the ones in C, C++, Java, JavaScript, and PHP. The difference is that it only runs the matched case so it does not need a break statement.


*/

/*
Syntax:

	switch expression {
	case x:
	// code block
	case y:
	// code block
	case z:
	...
	default:
	// code block
	}
*/

// Example of a Single-Case switch
package main
import ("fmt")

func main() {
  day := 4

  switch day {
  case 1:
    fmt.Println("Monday")
  case 2:
    fmt.Println("Tuesday")
  case 3:
    fmt.Println("Wednesday")
  case 4:
    fmt.Println("Thursday")
  case 5:
    fmt.Println("Friday")
  case 6:
    fmt.Println("Saturday")
  case 7:
    fmt.Println("Sunday")
  }
}


// Output: Thursday

/*
Multi-case switch Statement:
	- It is possible to have multiple values for each case in the switch statement

Syntax:
	switch expression {
	case x,y:
	// code block if expression is evaluated to x or y
	case v,w:
	// code block if expression is evaluated to v or w
	case z:
	...
	default:
	// code block if expression is not found in any cases
	}
*/

/* Exmple:

package main
import ("fmt")

func main() {
   day := 5

   switch day {
   case 1,3,5:
    fmt.Println("Odd weekday")
   case 2,4:
     fmt.Println("Even weekday")
   case 6,7:
    fmt.Println("Weekend")
  default:
    fmt.Println("Invalid day of day number")
  }
}
 // Output: Odd weekday

*/


// Task 2: Loops

/*
For Loops:
	- The for loop loops through a block of code a specified number of times.
	- The for loop is the only loop available in Go.
	- Loops are handy if you want to run the same code over and over again, each time with a different value. 
	- Each execution of a loop is called an iteration.
*/

/*
Syntax:
	for statement1; statement2; statement3 {
	// code to be executed for each iteration
	}

		- statement1 Initializes the loop counter value.
		- statement2 Evaluated for each loop iteration. If it evaluates to TRUE, the loop continues. If it evaluates to FALSE, the loop ends.
		- statement3 Increases the loop counter value
*/

// Example 
	package main
	import ("fmt")

	func main() {
	for i:=0; i < 5; i++ {
		fmt.Println(i)
	}
	/*
	i := 0; // intializes it to 0
	i < 5; // says it will keep running till it hits 5
	i++ // keey adding one to keep running so... 1+0 then 1+1 then 2+1 and so on.
	*/

	/* Output
			0
			1
			2
			3
			4
	*/
	}

/* Example 2

	package main
	import ("fmt")

	func main() {
	for i:=0; i <= 100; i+=10 {
		fmt.Println(i)
	}
	}

	Output: 
		0
		10
		20
		30
		40
		50
		60
		70
		80
		90
		100
*/

/*
The Continue Statement:
	- The continue statement is used to skip one or more iterations in the loop. 
	- It then continues with the next iteration in the loop.
*/

// Example

package main
import ("fmt")

func main() {
  for i:=0; i < 5; i++ {
    if i == 3 {
      continue
    }
	// 3 will not be skipped 
   fmt.Println(i)
  }
}

/*
Output:
0
1
2
4
*/

/*
The break Statement:
	- The break statement is used to break/terminate the loop execution.
*/

// Example
package main
import ("fmt")

func main() {
  for i:=0; i < 5; i++ {
    if i == 3 {
      break
    }
	// the program will now exit/terminate because it hits 3
   fmt.Println(i)
  }
}

/*
Output:
0
1
2
*/

/*
The Range Keyword: 
- The range keyword is used to more easily iterate through the elements of an array, slice or map. 
It returns both the index and the value.

Syntax:

for index, value := range array|slice|map {
   // code to be executed for each iteration
}

*/

package main
import ("fmt")

func main() {
  fruits := [3]string{"apple", "orange", "banana"}
  for idx, val := range fruits {
     fmt.Printf("%v\t%v\n", idx, val)
  }

  for _, val := range fruits {
	fmt.Printf("%v\n", val)
 }

 for idx, _ := range fruits {
	fmt.Printf("%v\n", idx)
 }

}

/*
Both Values and Index
Output:
0      apple
1      orange
2      banana

Values:
Output:
apple
orange
banana

Index
Output:
0
1
2
*/

Task 3: Functions, Parameters, Arguments

/*
Functions:
	- A function is a block of statements that can be used repeatedly in a program.
	- A function will not execute automatically when a page loads.
	- A function will be executed by a call to the function
*/

/*
Creating Function/Syntax:
		- To create (often referred to as declare) a function, do the following:
				- Use the func keyword.
				- Specify a name for the function, followed by parentheses ().
				- Finally, add code that defines what the function should do, inside curly braces {}.

Syntax:				
	func FunctionName() {
	// code to be executed
	}
*/

/*
Calling a Function:
	- Functions are not executed immediately.
	- Call it in main with <functionname>()
*/

// Example
package main
import ("fmt")

func myMessage() {
  fmt.Println("I just got executed!")
} // Output: I just got called

func main() {
  myMessage() // call the function
  // myMessage() // this would call it again
}

/*
Parameters and Arguments:
	- Parameters act as variables inside the function.
	- Parameters and their types are specified after the function name, inside the parentheses. 
	  You can add as many parameters as you want, just separate them with a comma.


Syntax:
	func FunctionName(param1 type, param2 type, param3 type) {
	// code to be executed
	}

*/

// Ex. Function with Parameter and Function with Multiple Parameters
	package main
	import ("fmt")

	func familyName(fname string){
		fmt.Println("Hello", fname, "Refsnes")
	}

	func rivalFamilyName(rname string, age int){
		fmt.Println("Hi", age, "year old", rname, "Drake")
	}

	func main(){
	familyName("Liam") // parameter is fname 
	familyName("Jenny") // parameter is fname 
	familyName("Anja") // parameter is fname 
	rivalFamilyName("Lake", 17)
	rivalFamilyName("Jeffery", 39)
	rivalFamilyName("Marissa", 37)

  /*
	Output:
		Hello Liam Refsnes
		Hello Jenny Refsnes
		Hello Anja Refsnes 
	*/
/*
	Output: 
		Hi 17 year old Lake Drake
		Hi 39 year old Jeffery Drake
		Hi 37 year old Marissa Drake
*/
}


/*
Function Returns
	- If you want the function to return a value, you need to define the data type of the return value (such as int, string, etc)
	- Also use the return keyword inside the function:

Syntax:
	func FunctionName(param1 type, param2 type) type {
	// code to be executed
	return output
	}
*/

// Examples

package main
import ("fmt")

// Example: Return
func myFunction(x int, y int) int {
  return x + y
}

// Named Return Values 
func myFunc(a int, b int) (result int) {
	result = a + b
	return
  }

// Storing the Return Value in a Variable
func myF(q int, p int)(result int){
	result = q + p
	return
}

// Multiple Return Values
func newFunction(k int, l string)(result int, txt1 string){
	result k + k
	txt1 = y + "Bong"
	return
}

// Storing the two return values into two variables
func double_it(f int, g string)(result int, txt2 string){
	result = f * f
	txt2 = g + "James"
	return
}

// Omitting the returned values
func omitting(t int, v string)(result int, txt3 string){
	result = t / t
	txt3 = v + "Boom, Boom"
	return
}

func main() {
  // Regular Return
  fmt.Println(myFunction(1, 2)) // Output: 3
  
  // Named Return Values 
  fmt.Println(myFunc(2, 3)) // Output: 5

  // Storing the Return Value in a Variable
  total_of_myF := myFunc(6, 4)
  fmt.Println(total_of_myF) // Output: 10

  // Multiple Return Values
  fmt.Println(newFunction(7, "Bing")) // Output: 14 Bing Bong

  // Storing the two return values into two variables
  e, r := double_it(6, "Lebron")
  fmt.Println(e, r) // Output: 36 Lebron James

  // Omitting the first returned value 
  _, v := omitting(7, "Boom,")
  fmt.Println(v) // Output: Boom, Boom, Boom 

  // Omitting the first returned value 
  t, _ := omitting(7, "Boom,")
  fmt.Println(v) // Output: 1

} 

Task 4: Recursion

/*
Recursion Functions:
	- Go accepts recursion functions. 
	- A function is recursive if it calls itself and reaches a stop condition.

*/

// Example

package main
import ("fmt")

func testcount(x int) int {
  if x == 11 {
    return 0
  } // Base Case
  fmt.Println(x)
  return testcount(x + 1) // recursive call
}

func main(){
  testcount(1)
}

// Factorial Recursion

/*
What is a factorial 
- n! = n * (n-1)* (n-2)
*/

package main
import ("fmt")

func factorial_recursion(x float64) (y float64) {
  if x > 0 {
     y = x * factorial_recursion(x-1)
  } else {
     y = 1
  } // base case
  return
}

func main() {
  fmt.Println(factorial_recursion(4))
} // Output: 24

Task 5: Structs

/*
Struct (Structure):
	- A struct is used to create a collection of members of different data types, into a single variable.
	- While arrays are used to store multiple values of the same data type into a single variable, structs are used to store multiple values of different data types into a single variable.
*/

/*
Syntax:
	type struct_name struct {
	member1 datatype;
	member2 datatype;
	member3 datatype;
	...
	}
*/

/*
Example of using syntax:
	type Person struct {
	name string
	age int
	job string
	salary int
	}
*/

package main
import ("fmt")

type Person struct {
  name string
  age int
  job string
  salary int
}

func main() {
  var pers1 Person
  var pers2 Person

  // Pers1 specification
  pers1.name = "Hege"
  pers1.age = 45
  pers1.job = "Teacher"
  pers1.salary = 6000

  // Pers2 specification
  pers2.name = "Cecilie"
  pers2.age = 24
  pers2.job = "Marketing"
  pers2.salary = 4500

  // Access and print Pers1 info
  fmt.Println("Name: ", pers1.name)
  fmt.Println("Age: ", pers1.age)
  fmt.Println("Job: ", pers1.job)
  fmt.Println("Salary: ", pers1.salary)

  // Access and print Pers2 info
  fmt.Println("Name: ", pers2.name)
  fmt.Println("Age: ", pers2.age)
  fmt.Println("Job: ", pers2.job)
  fmt.Println("Salary: ", pers2.salary)
}

/*
Output:
Name: Hege
Age: 45
Job: Teacher
Salary: 6000
Name: Cecilie
Age: 24
Job: Marketing
Salary: 4500
*/

/*
Passing a Struct as Function Arguments:
*/

package main

import "fmt"

type BasketballPlayer struct {
	name      string
	age       int
	team      string
	pointsPerGame float64
}

func main() {
	var player1 BasketballPlayer
	var player2 BasketballPlayer

	// Player1 specification
	player1.name = "LeBron James"
	player1.age = 39
	player1.team = "Los Angeles Lakers"
	player1.pointsPerGame = 27.2

	// Player2 specification
	player2.name = "Stephen Curry"
	player2.age = 35
	player2.team = "Golden State Warriors"
	player2.pointsPerGame = 24.6

	// Print player info by calling a function
	printPlayer(player1)
	printPlayer(player2)
}

func printPlayer(player BasketballPlayer) {
	fmt.Println("Name: ", player.name)
	fmt.Println("Age: ", player.age)
	fmt.Println("Team: ", player.team)
	fmt.Println("Points Per Game: ", player.pointsPerGame)
	fmt.Println()
}

/*
Name:  LeBron James
Age:  39
Team:  Los Angeles Lakers
Points Per Game:  27.2

Name:  Stephen Curry
Age:  35
Team:  Golden State Warriors
Points Per Game:  24.6

*/
