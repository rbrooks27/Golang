Task 1: Statements continued

/*
Nested Loops:
- It is possible to place a loop inside another loop.
- Here, the "inner loop" will be executed one time for each iteration of the "outer loop"
*/

package main
import ("fmt")

func main() {
  adj := [2]string{"big", "tasty"}
  fruits := [3]string{"apple", "orange", "banana"}
  for i:=0; i < len(adj); i++ {
    for j:=0; j < len(fruits); j++ {
      fmt.Println(adj[i],fruits[j])
    }
  }
}

/*
Output:
big apple
big orange
big banana
tasty apple
tasty orange
tasty banana
*/

/*
The Switch Statement:
	- Use the switch statement to select one of many code blocks to be executed.
	- The switch statement in Go is similar to the ones in C, C++, Java, JavaScript, and PHP. The difference is that it only runs the matched case so it does not need a break statement.


*/

/*
Syntax:

	switch expression {
	case x:
	// code block
	case y:
	// code block
	case z:
	...
	default:
	// code block
	}
*/

// Example of a Single-Case switch
package main
import ("fmt")

func main() {
  day := 4

  switch day {
  case 1:
    fmt.Println("Monday")
  case 2:
    fmt.Println("Tuesday")
  case 3:
    fmt.Println("Wednesday")
  case 4:
    fmt.Println("Thursday")
  case 5:
    fmt.Println("Friday")
  case 6:
    fmt.Println("Saturday")
  case 7:
    fmt.Println("Sunday")
  }
}


// Output: Thursday

/*
Multi-case switch Statement:
	- It is possible to have multiple values for each case in the switch statement

Syntax:
	switch expression {
	case x,y:
	// code block if expression is evaluated to x or y
	case v,w:
	// code block if expression is evaluated to v or w
	case z:
	...
	default:
	// code block if expression is not found in any cases
	}
*/

/* Exmple:

package main
import ("fmt")

func main() {
   day := 5

   switch day {
   case 1,3,5:
    fmt.Println("Odd weekday")
   case 2,4:
     fmt.Println("Even weekday")
   case 6,7:
    fmt.Println("Weekend")
  default:
    fmt.Println("Invalid day of day number")
  }
}
 // Output: Odd weekday

*/


// Task 2: Loops

/*
For Loops:
	- The for loop loops through a block of code a specified number of times.
	- The for loop is the only loop available in Go.
	- Loops are handy if you want to run the same code over and over again, each time with a different value. 
	- Each execution of a loop is called an iteration.
*/

/*
Syntax:
	for statement1; statement2; statement3 {
	// code to be executed for each iteration
	}

		- statement1 Initializes the loop counter value.
		- statement2 Evaluated for each loop iteration. If it evaluates to TRUE, the loop continues. If it evaluates to FALSE, the loop ends.
		- statement3 Increases the loop counter value
*/

// Example 
	package main
	import ("fmt")

	func main() {
	for i:=0; i < 5; i++ {
		fmt.Println(i)
	}
	/*
	i := 0; // intializes it to 0
	i < 5; // says it will keep running till it hits 5
	i++ // keey adding one to keep running so... 1+0 then 1+1 then 2+1 and so on.
	*/

	/* Output
			0
			1
			2
			3
			4
	*/
	}

/* Example 2

	package main
	import ("fmt")

	func main() {
	for i:=0; i <= 100; i+=10 {
		fmt.Println(i)
	}
	}

	Output: 
		0
		10
		20
		30
		40
		50
		60
		70
		80
		90
		100
*/

/*
The Continue Statement:
	- The continue statement is used to skip one or more iterations in the loop. 
	- It then continues with the next iteration in the loop.
*/

// Example

package main
import ("fmt")

func main() {
  for i:=0; i < 5; i++ {
    if i == 3 {
      continue
    }
	// 3 will not be skipped 
   fmt.Println(i)
  }
}

/*
Output:
0
1
2
4
*/

